[gd_scene load_steps=9 format=2]

[ext_resource path="res://Enemies/Enemies/SkySquid/BabySquid.png" type="Texture" id=1]
[ext_resource path="res://AttackSquid.gd" type="Script" id=2]

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

uniform float amount = 1;

void fragment(){
	COLOR.a = texture(TEXTURE, UV).a;
	COLOR.rgb = mix(vec3(0.5 * length(texture(TEXTURE, UV).rgb)), texture(TEXTURE, UV).rgb, amount);
}"

[sub_resource type="ShaderMaterial" id=22]
resource_local_to_scene = true
shader = SubResource( 2 )
shader_param/amount = 1.0

[sub_resource type="Animation" id=4]
length = 2.0
tracks/0/type = "value"
tracks/0/path = NodePath(".:scale")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:material:shader_param/amount")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5, 1.2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 1.0, 1.0, 0.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:modulate")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=5]
length = 3.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/amount")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 1.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:scale")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.7, 2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ), Vector2( 1.03, 0.97 ), Vector2( 0.97, 1.03 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:modulate")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=6]
length = 1.5
loop = true
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath(".:scale")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.35, 0.5, 0.55, 0.65, 0.75, 0.9 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 1.1, 0.9 ), Vector2( 0.95, 1.05 ), Vector2( 1.15, 0.85 ), Vector2( 1, 1 ), Vector2( 0.95, 1.05 ), Vector2( 1.1, 0.9 ), Vector2( 1.1, 0.9 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:material:shader_param/amount")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 1.0 ]
}
tracks/2/type = "method"
tracks/2/path = NodePath("../..")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0.45, 0.8 ),
"transitions": PoolRealArray( 1, 1 ),
"values": [ {
"args": [  ],
"method": "suck"
}, {
"args": [  ],
"method": "suck"
} ]
}
tracks/3/type = "value"
tracks/3/path = NodePath(".:modulate")
tracks/3/interp = 2
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.35, 0.5, 0.65, 0.9 ),
"transitions": PoolRealArray( 3.86374, 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1.62353, 0.376471, 0.376471, 1 ), Color( 1, 1, 1, 1 ), Color( 1.66667, 0.211765, 0.215686, 1 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=7]
length = 0.75
loop = true
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath(".:scale")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3, 0.45, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ), Vector2( 1.1, 0.9 ), Vector2( 0.9, 1.1 ), Vector2( 1, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:material:shader_param/amount")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 1.0 ]
}
tracks/2/type = "method"
tracks/2/path = NodePath("../..")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0.4 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [ 20.0 ],
"method": "swim"
} ]
}
tracks/3/type = "value"
tracks/3/path = NodePath(".:modulate")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[node name="AttackSquid" type="Sprite"]
material = SubResource( 22 )
scale = Vector2( 1.1, 0.9 )
texture = ExtResource( 1 )
script = ExtResource( 2 )

[node name="Squish" type="AnimationPlayer" parent="."]
autoplay = "Suck"
anims/Die = SubResource( 4 )
anims/Idle = SubResource( 5 )
anims/Suck = SubResource( 6 )
anims/Swim = SubResource( 7 )
